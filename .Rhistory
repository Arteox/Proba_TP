M<-matrix(M,nrow=k,ncol=p)
return (M)
}
StandardMinimal <- function(k,graine,p=1)
{
a <- 16807
b <- 0 #On pourrait l'enlever, comme il vaut 0 et ne varie jamais, mais par défaut de cohérence, nous le laissons.
m <- 2^31-1
s <- graine
M <- rep(graine,k*p+1)
for(i in 1:(k*p))
{
s <- (a*s+b)%%m
M[i] <- s
}
M<-matrix(M,nrow=k,ncol=p)
return (M)
}
binary <- function(x)
{
if((x<2^31)&(x>=0))
return( as.integer(rev(intToBits(as.integer(x)))) )
else{
if((x<2^32)&(x>0))
return( c(1,binary(x-2^31)[2:32]) )
else{
cat('Erreur dans binary : le nombre etudie n est pas un entier positif en 32 bits.\n')
return(c())
}
}
}
Frequency <- function(x,nb)
{
Sn <- 0
for(i in 1:length(x))
{
bin <- binary(x[i]);
for(i in (33-nb):32)
{
bin[i] <- 2*bin[i]-1
}
Sn <- sum(bin[(33-nb):32])+Sn
}
Sobs <- abs(Sn)/(sqrt(nb*length(x)))
pValeur <- 2*(1-pnorm(Sobs))
return(pValeur)
}
Runs <- function(x,nb)
{
#calcul de pi
pi <- 0
for (j in 1:length(x)){
bin <- binary(x[j])
for (i in (33-nb):32){
pi <- pi + bin[i]
}
}
pi <- pi/(length(x)*nb)
print("valeur de pi")
print(pi)
#verification que le resultat du pretest soit correct
to <- 2/sqrt(nb)
if (abs(pi-0.5)>=to){
print('pretest correct')
return(0) #pValeur vaut 0 dans ce cas
}
#si pretest incorrect, on fait un deuxieme test
else{
#on initialise a 1 car Vobs = somme des bits+1
Vobs <- 1
for (j in 1:length(x)){
lastBit <- 0
bin <- binary(x[j])
#on parcourt chaque bit
for (i in (33-nb):32){
#pas le premier bit ni le dernier et bit actuel different du suivant
if (i >(33-nb) && i < 32 && bin[i]!=bin[i+1]){
Vobs <- Vobs + 1 # r vaut 1
}
#si c'est le dernier bit
else if (i == 32 ){
lastBit <- bin[i] # on sauvegarde ce bit pour une future comparaison
}
#si c'est le premier bit et pas de la premiere valeur
else if (i == (33-nb) && j>1){
#comparaison avec le last bit du mot precedent
if (lastBit != bin[i]){
Vobs <- Vobs +1
}
#comparaison avec le bit suivant
if (bin[i] != bin[i+1]){
Vobs <- Vobs+1
}
}
#premier bit de la premiere valeur
else if (i==(33-nb)){
#comparaison avec le bit suivant
if (bin[i] != bin[i+1]){
Vobs <- Vobs+1
}
}
}
}
print("valeur de Vobs")
print(Vobs)
#calcul de la pValeur
pValeur <- 2*(1-pnorm(abs(Vobs-2*nb*pi*(1-pi))/(2*sqrt(nb)*pi*(1-pi))))
if (pValeur < 0.01){
print("la sequence n'est pas aleatoire")
}
else {
print("la sequence est aleatoire")
}
return(pValeur)
}
}
OrderTest <- function(x,D){
mini <- min(x)
maxi <- max(x)
for (i in 1:length(x)){
x[i] <- (x[i]-mini)/(maxi-mini)
}
pVal = order.test(x,d=D,echo=FALSE)$p.value
if (pVal < 0.01){
print("ce n'est pas une loi uniforme")
}
else {
print("c'est une loi uniforme")
}
return(pVal)
}
library(randtoolbox)
source('generateurs.R')
options(digits=5)
sVN <- 9271
sMT <- 250
sR <- 3316
Nsimu <- 1000
Nrepet <- 1
############################################################
##  Section 2
############################################################
vn <- VonNeumann(Nsimu,Nrepet,sVN)
mt <- MersenneTwister(Nsimu,Nrepet,sMT)
rnd <- Randu(Nsimu,sR,Nrepet)
std <- StandardMinimal(Nsimu,sR,Nrepet)
par(mfrow=c(1,1))
#hist(mt[,1],xlab='',main='Mersenne Twister')
hist(vn[,1],xlab='',main='Von Neumann')
#hist(rnd[,1],xlab='',main='Randu')
hist(std[,1],xlab='',main='Standard Minimal')
par(mfrow=c(1,2))
plot(mt[1:(Nsimu-1),1],mt[2:Nsimu,1],xlab='MT(i)', ylab='MT(i+1)', main='Mersenne Twister')
plot(vn[1:(Nsimu-1),1],vn[2:Nsimu,1],xlab='VN(i)', ylab='VN(i+1)', main='Von Neumann')
# Sequence de bits pour les tests
(bit_mt <- binary(mt[1,1]))
###########################################################
##  Test de fréquence Monobit
###########################################################
print(Frequency(mt,32)) #nb a 14 pour VN, a 31 pour rdn et std et 32 pour mt
###########################################################
##  Test des runs
###########################################################
#test avec une valeur predefinie
valeur_predef = 619 #cette valeur ne valide pas le pretest
print(Runs(valeur_predef,10))
#test avec les generateurs
print(Runs(mt,32))
print(Runs(rnd,32))
print(Runs(std,32))
print(Runs(vn,32))
###########################################################
##  Test d'ordre
###########################################################
vn <- VonNeumann(Nsimu,4,sVN)
mt <- MersenneTwister(Nsimu,4,sMT)
rnd <- Randu(Nsimu,sR,4)
std <- StandardMinimal(Nsimu,sR,4)
print(OrderTest(mt,4))
print(OrderTest(vn,4))
print(OrderTest(rnd,4))
print(OrderTest(std,4))
1001101011
512+64+32+8+2+1
library(randtoolbox)
source('generateurs.R')
options(digits=5)
sVN <- 9271
sMT <- 25
sR <- 3316
Nsimu <- 1000
Nrepet <- 1
############################################################
##  Section 2
############################################################
vn <- VonNeumann(Nsimu,Nrepet,sVN)
mt <- MersenneTwister(Nsimu,Nrepet,sMT)
rnd <- Randu(Nsimu,sR,Nrepet)
std <- StandardMinimal(Nsimu,sR,Nrepet)
par(mfrow=c(1,1))
#hist(mt[,1],xlab='',main='Mersenne Twister')
hist(vn[,1],xlab='',main='Von Neumann')
#hist(rnd[,1],xlab='',main='Randu')
hist(std[,1],xlab='',main='Standard Minimal')
par(mfrow=c(1,2))
plot(mt[1:(Nsimu-1),1],mt[2:Nsimu,1],xlab='MT(i)', ylab='MT(i+1)', main='Mersenne Twister')
plot(vn[1:(Nsimu-1),1],vn[2:Nsimu,1],xlab='VN(i)', ylab='VN(i+1)', main='Von Neumann')
# Sequence de bits pour les tests
(bit_mt <- binary(mt[1,1]))
###########################################################
##  Test de fréquence Monobit
###########################################################
print(Frequency(mt,32)) #nb a 14 pour VN, a 31 pour rdn et std et 32 pour mt
###########################################################
##  Test des runs
###########################################################
#test avec une valeur predefinie
valeur_predef = 619 #cette valeur ne valide pas le pretest
print(Runs(valeur_predef,10)) #valeur attendue : à 0.1472
#test avec les generateurs
print(Runs(mt,32))
print(Runs(rnd,32))
print(Runs(std,32))
print(Runs(vn,32))
###########################################################
##  Test d'ordre
###########################################################
vn <- VonNeumann(Nsimu,4,sVN)
mt <- MersenneTwister(Nsimu,4,sMT)
rnd <- Randu(Nsimu,sR,4)
std <- StandardMinimal(Nsimu,sR,4)
print(OrderTest(mt,4))
print(OrderTest(vn,4))
print(OrderTest(rnd,4))
print(OrderTest(std,4))
library(randtoolbox)
source('generateurs.R')
options(digits=5)
sVN <- 9271
sMT <- 25
sR <- 3316
Nsimu <- 1000
Nrepet <- 1
############################################################
##  Section 2
############################################################
vn <- VonNeumann(Nsimu,Nrepet,sVN)
mt <- MersenneTwister(Nsimu,Nrepet,sMT)
rnd <- Randu(Nsimu,sR,Nrepet)
std <- StandardMinimal(Nsimu,sR,Nrepet)
par(mfrow=c(1,1))
#hist(mt[,1],xlab='',main='Mersenne Twister')
hist(vn[,1],xlab='',main='Von Neumann')
#hist(rnd[,1],xlab='',main='Randu')
hist(std[,1],xlab='',main='Standard Minimal')
par(mfrow=c(1,2))
plot(mt[1:(Nsimu-1),1],mt[2:Nsimu,1],xlab='MT(i)', ylab='MT(i+1)', main='Mersenne Twister')
plot(vn[1:(Nsimu-1),1],vn[2:Nsimu,1],xlab='VN(i)', ylab='VN(i+1)', main='Von Neumann')
# Sequence de bits pour les tests
(bit_mt <- binary(mt[1,1]))
###########################################################
##  Test de fréquence Monobit
###########################################################
print(Frequency(mt,32)) #nb a 14 pour VN, a 31 pour rdn et std et 32 pour mt
print(Frequency(vn,14))
print(Frequency(rdn,31))
print(Frequency(std,31))
###########################################################
##  Test des runs
###########################################################
#test avec une valeur predefinie
valeur_predef = 619 #cette valeur ne valide pas le pretest
print(Runs(valeur_predef,10)) #valeur attendue : à 0.1472
#test avec les generateurs
print(Runs(mt,32))
print(Runs(rnd,32))
print(Runs(std,32))
print(Runs(vn,32))
###########################################################
##  Test d'ordre
###########################################################
vn <- VonNeumann(Nsimu,4,sVN)
mt <- MersenneTwister(Nsimu,4,sMT)
rnd <- Randu(Nsimu,sR,4)
std <- StandardMinimal(Nsimu,sR,4)
print(OrderTest(mt,4))
print(OrderTest(vn,4))
print(OrderTest(rnd,4))
print(OrderTest(std,4))
library(randtoolbox)
source('generateurs.R')
options(digits=5)
sVN <- 9271
sMT <- 25
sR <- 3316
Nsimu <- 1000
Nrepet <- 1
############################################################
##  Section 2
############################################################
vn <- VonNeumann(Nsimu,Nrepet,sVN)
mt <- MersenneTwister(Nsimu,Nrepet,sMT)
rnd <- Randu(Nsimu,sR,Nrepet)
std <- StandardMinimal(Nsimu,sR,Nrepet)
par(mfrow=c(1,1))
#hist(mt[,1],xlab='',main='Mersenne Twister')
hist(vn[,1],xlab='',main='Von Neumann')
#hist(rnd[,1],xlab='',main='Randu')
hist(std[,1],xlab='',main='Standard Minimal')
par(mfrow=c(1,2))
plot(mt[1:(Nsimu-1),1],mt[2:Nsimu,1],xlab='MT(i)', ylab='MT(i+1)', main='Mersenne Twister')
plot(vn[1:(Nsimu-1),1],vn[2:Nsimu,1],xlab='VN(i)', ylab='VN(i+1)', main='Von Neumann')
# Sequence de bits pour les tests
(bit_mt <- binary(mt[1,1]))
###########################################################
##  Test de fréquence Monobit
###########################################################
print(Frequency(mt,32)) #nb a 14 pour VN, a 31 pour rdn et std et 32 pour mt
print(Frequency(vn,14))
print(Frequency(rnd,31))
print(Frequency(std,31))
###########################################################
##  Test des runs
###########################################################
#test avec une valeur predefinie
valeur_predef = 619 #cette valeur ne valide pas le pretest
print(Runs(valeur_predef,10)) #valeur attendue : à 0.1472
#test avec les generateurs
print(Runs(mt,32))
print(Runs(rnd,32))
print(Runs(std,32))
print(Runs(vn,32))
###########################################################
##  Test d'ordre
###########################################################
vn <- VonNeumann(Nsimu,4,sVN)
mt <- MersenneTwister(Nsimu,4,sMT)
rnd <- Randu(Nsimu,sR,4)
std <- StandardMinimal(Nsimu,sR,4)
print(OrderTest(mt,4))
print(OrderTest(vn,4))
print(OrderTest(rnd,4))
print(OrderTest(std,4))
max(vn)
4096*2
pow(2,14)
2^14
2^13
library(randtoolbox)
source('generateurs.R')
options(digits=5)
sVN <- 9271
sMT <- 25
sR <- 3316
Nsimu <- 1000
Nrepet <- 1
############################################################
##  Section 2
############################################################
vn <- VonNeumann(Nsimu,Nrepet,sVN)
mt <- MersenneTwister(Nsimu,Nrepet,sMT)
rnd <- Randu(Nsimu,sR,Nrepet)
std <- StandardMinimal(Nsimu,sR,Nrepet)
par(mfrow=c(1,1))
#hist(mt[,1],xlab='',main='Mersenne Twister')
hist(vn[,1],xlab='',main='Von Neumann')
#hist(rnd[,1],xlab='',main='Randu')
hist(std[,1],xlab='',main='Standard Minimal')
par(mfrow=c(1,2))
plot(mt[1:(Nsimu-1),1],mt[2:Nsimu,1],xlab='MT(i)', ylab='MT(i+1)', main='Mersenne Twister')
plot(vn[1:(Nsimu-1),1],vn[2:Nsimu,1],xlab='VN(i)', ylab='VN(i+1)', main='Von Neumann')
# Sequence de bits pour les tests
(bit_mt <- binary(mt[1,1]))
###########################################################
##  Test de fréquence Monobit
###########################################################
print(Frequency(mt,32)) #nb a 14 pour VN, a 31 pour rdn et std et 32 pour mt
print(Frequency(vn,14))
print(Frequency(rnd,31))
print(Frequency(std,31))
###########################################################
##  Test des runs
###########################################################
#test avec une valeur predefinie
valeur_predef = 619 #cette valeur ne valide pas le pretest
print(Runs(valeur_predef,10)) #valeur attendue : à 0.1472
#test avec les generateurs
print(Runs(mt,32))
print(Runs(rnd,32))
print(Runs(std,32))
print(Runs(vn,32))
###########################################################
##  Test d'ordre
###########################################################
vn <- VonNeumann(Nsimu,4,sVN)
mt <- MersenneTwister(Nsimu,4,sMT)
rnd <- Randu(Nsimu,sR,4)
std <- StandardMinimal(Nsimu,sR,4)
print(OrderTest(mt,4))
print(OrderTest(vn,4))
print(OrderTest(rnd,4))
print(OrderTest(std,4))
library(randtoolbox)
source('generateurs.R')
options(digits=5)
sVN <- 926
sMT <- 26
sR <- 331
Nsimu <- 1000
Nrepet <- 1
############################################################
##  Section 2
############################################################
vn <- VonNeumann(Nsimu,Nrepet,sVN)
mt <- MersenneTwister(Nsimu,Nrepet,sMT)
rnd <- Randu(Nsimu,sR,Nrepet)
std <- StandardMinimal(Nsimu,sR,Nrepet)
par(mfrow=c(1,1))
#hist(mt[,1],xlab='',main='Mersenne Twister')
hist(vn[,1],xlab='',main='Von Neumann')
#hist(rnd[,1],xlab='',main='Randu')
hist(std[,1],xlab='',main='Standard Minimal')
par(mfrow=c(1,2))
plot(mt[1:(Nsimu-1),1],mt[2:Nsimu,1],xlab='MT(i)', ylab='MT(i+1)', main='Mersenne Twister')
plot(vn[1:(Nsimu-1),1],vn[2:Nsimu,1],xlab='VN(i)', ylab='VN(i+1)', main='Von Neumann')
# Sequence de bits pour les tests
(bit_mt <- binary(mt[1,1]))
###########################################################
##  Test de fréquence Monobit
###########################################################
print(Frequency(mt,32)) #nb a 14 pour VN, a 31 pour rdn et std et 32 pour mt
print(Frequency(vn,14))
print(Frequency(rnd,31))
print(Frequency(std,31))
###########################################################
##  Test des runs
###########################################################
#test avec une valeur predefinie
valeur_predef = 619 #cette valeur ne valide pas le pretest
print(Runs(valeur_predef,10)) #valeur attendue : à 0.1472
#test avec les generateurs
print(Runs(mt,32))
print(Runs(rnd,32))
print(Runs(std,32))
print(Runs(vn,32))
###########################################################
##  Test d'ordre
###########################################################
vn <- VonNeumann(Nsimu,4,sVN)
mt <- MersenneTwister(Nsimu,4,sMT)
rnd <- Randu(Nsimu,sR,4)
std <- StandardMinimal(Nsimu,sR,4)
print(OrderTest(mt,4))
print(OrderTest(vn,4))
print(OrderTest(rnd,4))
print(OrderTest(std,4))
library(randtoolbox)
source('generateurs.R')
options(digits=5)
sVN <- 926
sMT <- 77
sR <- 331
Nsimu <- 1000
Nrepet <- 1
############################################################
##  Section 2
############################################################
vn <- VonNeumann(Nsimu,Nrepet,sVN)
mt <- MersenneTwister(Nsimu,Nrepet,sMT)
rnd <- Randu(Nsimu,sR,Nrepet)
std <- StandardMinimal(Nsimu,sR,Nrepet)
par(mfrow=c(1,1))
#hist(mt[,1],xlab='',main='Mersenne Twister')
hist(vn[,1],xlab='',main='Von Neumann')
#hist(rnd[,1],xlab='',main='Randu')
hist(std[,1],xlab='',main='Standard Minimal')
par(mfrow=c(1,2))
plot(mt[1:(Nsimu-1),1],mt[2:Nsimu,1],xlab='MT(i)', ylab='MT(i+1)', main='Mersenne Twister')
plot(vn[1:(Nsimu-1),1],vn[2:Nsimu,1],xlab='VN(i)', ylab='VN(i+1)', main='Von Neumann')
# Sequence de bits pour les tests
(bit_mt <- binary(mt[1,1]))
###########################################################
##  Test de fréquence Monobit
###########################################################
print(Frequency(mt,32)) #nb a 14 pour VN, a 31 pour rdn et std et 32 pour mt
print(Frequency(vn,14))
print(Frequency(rnd,31))
print(Frequency(std,31))
###########################################################
##  Test des runs
###########################################################
#test avec une valeur predefinie
valeur_predef = 619 #cette valeur ne valide pas le pretest
print(Runs(valeur_predef,10)) #valeur attendue : à 0.1472
#test avec les generateurs
print(Runs(mt,32))
print(Runs(rnd,32))
print(Runs(std,32))
print(Runs(vn,32))
###########################################################
##  Test d'ordre
###########################################################
vn <- VonNeumann(Nsimu,4,sVN)
mt <- MersenneTwister(Nsimu,4,sMT)
rnd <- Randu(Nsimu,sR,4)
std <- StandardMinimal(Nsimu,sR,4)
print(OrderTest(mt,4))
print(OrderTest(vn,4))
print(OrderTest(rnd,4))
print(OrderTest(std,4))
tinytex::install_tinytex()
install.packages("randtoolbox")
